import{_ as a,c as t,o as e,a4 as s}from"./chunks/framework.DpC1ZpOZ.js";const m=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_AdjustWeightAllMult.md","filePath":"comfyui/ADE/ADE_AdjustWeightAllMult.md"}'),n={name:"comfyui/ADE/ADE_AdjustWeightAllMult.md"},l=s(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: WeightAdjustAllMultNode</li><li>Category: Animate Diff 🎭🅐🅓/ad settings/weight adjust</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>WeightAdjustAllMultNode类的&#39;get_weight_adjust&#39;方法旨在对模型中的所有权重应用统一的乘数，从而在不改变底层架构的情况下微调模型参数。它是调整模型权重整体规模的关键工具，特别适用于需要根据不同输入范围或灵敏度水平校准模型响应的场景。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>all_MULT <ul><li>参数&#39;all_MULT&#39;对于确定将应用于模型中所有权重的统一乘数至关重要。它允许对模型的权重进行简单的缩放，这可以显著影响模型的性能和行为。此参数对于调整模型对输入数据的敏感度非常关键。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>print_adjustment <ul><li>参数&#39;print_adjustment&#39;是一个可选的标志，设置为True时启用记录权重调整的详细信息。这对于调试或希望在调整过程中跟踪对模型权重所做的调整的用户来说非常有用。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li><li>prev_weight_adjust <ul><li>参数&#39;prev_weight_adjust&#39;允许用户提供一个先前的权重调整组，然后方法将在此基础上构建。这对于增量调整非常有用，其中方法可以从先前建立的状态继续，而不是从头开始。</li><li>Comfy dtype: WEIGHT_ADJUST</li><li>Python dtype: AdjustGroup</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>WEIGHT_ADJUST <ul><li>&#39;get_weight_adjust&#39;方法的输出是一个&#39;WEIGHT_ADJUST&#39;对象，它封装了对模型权重所做的调整。这个对象非常重要，因为它代表了权重调整过程后模型参数的更新状态，准备用于进一步的模型训练或推理。</li><li>Comfy dtype: WEIGHT_ADJUST</li><li>Python dtype: AdjustGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class WeightAdjustAllMultNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;all_MULT&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 1.0, &#39;min&#39;: 0.0, &#39;max&#39;: 2.0, &#39;step&#39;: 1e-06}), &#39;print_adjustment&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False})}, &#39;optional&#39;: {&#39;prev_weight_adjust&#39;: (&#39;WEIGHT_ADJUST&#39;,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;WEIGHT_ADJUST&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/ad settings/weight adjust&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;get_weight_adjust&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def get_weight_adjust(self, all_MULT: float, print_adjustment: bool, prev_weight_adjust: AdjustGroup=None):</span></span>
<span class="line"><span>        if prev_weight_adjust is None:</span></span>
<span class="line"><span>            prev_weight_adjust = AdjustGroup()</span></span>
<span class="line"><span>        prev_weight_adjust = prev_weight_adjust.clone()</span></span>
<span class="line"><span>        adjust = AdjustWeight(all_MULT=all_MULT, print_adjustment=print_adjustment)</span></span>
<span class="line"><span>        prev_weight_adjust.add(adjust)</span></span>
<span class="line"><span>        return (prev_weight_adjust,)</span></span></code></pre></div>`,14),i=[l];function p(u,o,d,r,h,_){return e(),t("div",null,i)}const g=a(n,[["render",p]]);export{m as __pageData,g as default};
