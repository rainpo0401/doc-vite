import{_ as a,c as e,o as t,a4 as i}from"./chunks/framework.DpC1ZpOZ.js";const h=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_AdjustPEManual.md","filePath":"comfyui/ADE/ADE_AdjustPEManual.md"}'),n={name:"comfyui/ADE/ADE_AdjustPEManual.md"},s=i(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: ManualAdjustPENode</li><li>Category: Animate Diff 🎭🅐🅓/ad settings/pe adjust</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>该节点旨在手动调整与动画工作流中PE（个人能量）相关的参数。它允许微调初始和最终PE索引，插值到特定长度，并提供打印调整的选项。节点在自定义动画中的能量水平以实现所需效果中发挥着关键作用。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>cap_initial_pe_length <ul><li>此参数定义了要限制的PE的初始长度，这对于控制动画中的起始能量水平至关重要。它直接影响能量动态和整个动画序列的整体感觉。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>interpolate_pe_to_length <ul><li>插值参数允许PE平滑过渡到指定长度，确保动画中能量的和谐流动。这是实现能量水平自然进展的关键因素。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>initial_pe_idx_offset <ul><li>此偏移参数用于调整PE的起始索引，可以显著改变动画的初始能量状态。它提供了一种在序列开始时微调能量输入的方法。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>final_pe_idx_offset <ul><li>最终PE索引偏移对于定义动画的结束能量状态至关重要。它允许对动画序列结束时能量的解决方式进行精确控制。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>print_adjustment <ul><li>这个布尔标志决定了对PE所做的调整是否会被打印出来。这对于调试和理解调整对动画的影响非常有用。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>prev_pe_adjust <ul><li>以前的PE调整组提供了一种在现有调整基础上构建的方法，允许在动画中产生累积效果。它是一个可选参数，增强了节点功能的灵活性。</li><li>Comfy dtype: PE_ADJUST</li><li>Python dtype: AdjustGroup</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>PE_ADJUST <ul><li>该节点的输出是一个包含对PE进行手动调整的AdjustGroup对象。它很重要，因为它直接影响最终的能量水平和动画的整体结果。</li><li>Comfy dtype: PE_ADJUST</li><li>Python dtype: AdjustGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class ManualAdjustPENode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;cap_initial_pe_length&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: 0, &#39;step&#39;: 1}), &#39;interpolate_pe_to_length&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: 0, &#39;step&#39;: 1}), &#39;initial_pe_idx_offset&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: 0, &#39;step&#39;: 1}), &#39;final_pe_idx_offset&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: 0, &#39;step&#39;: 1}), &#39;print_adjustment&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False})}, &#39;optional&#39;: {&#39;prev_pe_adjust&#39;: (&#39;PE_ADJUST&#39;,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;PE_ADJUST&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/ad settings/pe adjust&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;get_pe_adjust&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def get_pe_adjust(self, cap_initial_pe_length: int, interpolate_pe_to_length: int, initial_pe_idx_offset: int, final_pe_idx_offset: int, print_adjustment: bool, prev_pe_adjust: AdjustGroup=None):</span></span>
<span class="line"><span>        if prev_pe_adjust is None:</span></span>
<span class="line"><span>            prev_pe_adjust = AdjustGroup()</span></span>
<span class="line"><span>        prev_pe_adjust = prev_pe_adjust.clone()</span></span>
<span class="line"><span>        adjust = AdjustPE(cap_initial_pe_length=cap_initial_pe_length, interpolate_pe_to_length=interpolate_pe_to_length, initial_pe_idx_offset=initial_pe_idx_offset, final_pe_idx_offset=final_pe_idx_offset, print_adjustment=print_adjustment)</span></span>
<span class="line"><span>        prev_pe_adjust.add(adjust)</span></span>
<span class="line"><span>        return (prev_pe_adjust,)</span></span></code></pre></div>`,14),l=[s];function p(o,u,d,_,r,c){return t(),e("div",null,l)}const m=a(n,[["render",p]]);export{h as __pageData,m as default};
