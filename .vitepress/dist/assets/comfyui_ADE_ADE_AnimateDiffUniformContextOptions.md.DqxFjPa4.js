import{_ as e,c as t,o as l,a4 as i}from"./chunks/framework.DpC1ZpOZ.js";const f=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_AnimateDiffUniformContextOptions.md","filePath":"comfyui/ADE/ADE_AnimateDiffUniformContextOptions.md"}'),n={name:"comfyui/ADE/ADE_AnimateDiffUniformContextOptions.md"},a=i(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: LegacyLoopedUniformContextOptionsNode</li><li>Category: Context</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>LegacyLoopedUniformContextOptionsNode旨在为统一循环模式创建上下文选项提供便利。它抽象了设置上下文参数的复杂性，允许在系统中以简化的方法管理上下文。此节点强调了易用性和生成一致上下文配置的能力。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>context_length <ul><li>context_length参数定义了上下文窗口的长度，这对于确定正在处理的数据的范围至关重要。它通过影响上下文的粒度，在节点的执行中起着重要作用。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>context_stride <ul><li>context_stride参数决定了连续上下文窗口之间的步长，这对于控制上下文的重叠和分布至关重要。它影响节点如何处理和组织上下文中的数据。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>context_overlap <ul><li>context_overlap参数指定相邻上下文窗口之间的重叠量，这对于确保连续性并减少数据覆盖中的间隙很重要。它是节点在跨上下文维护数据完整性能力的关键因素。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>context_schedule <ul><li>context_schedule参数概述了处理上下文的时间表，这对于确定上下文操作的顺序和时间至关重要。它是节点有效协调上下文工作流程的能力的组成部分。</li><li>Comfy dtype: ContextSchedules.LEGACY_UNIFORM_SCHEDULE_LIST</li><li>Python dtype: ContextSchedules</li></ul></li><li>closed_loop <ul><li>closed_loop参数指示上下文处理是否应在闭环中运行，这对于在上下文处理中建立循环模式非常重要。它影响节点管理重复上下文任务的方法。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>fuse_method <ul><li>fuse_method参数确定融合上下文的方法，当处理多个上下文时，这对于优化节点的性能可能很重要。它提供了在节点操作中如何组合上下文的灵活性。</li><li>Comfy dtype: ContextFuseMethod.LIST</li><li>Python dtype: ContextFuseMethod</li></ul></li><li>use_on_equal_length <ul><li>use_on_equal_length参数指定当上下文长度相等时是否应采取特定行动，影响节点在上下文管理中的决策过程。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li><li>start_percent <ul><li>start_percent参数设置上下文处理应开始的百分比，这可以影响数据集中上下文的起始点。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>guarantee_steps <ul><li>guarantee_steps参数确保在上下文处理中至少采取一定数量的步骤，这对于保持节点在提供一致结果方面的可靠性至关重要。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>prev_context <ul><li>prev_context参数允许将先前的上下文选项纳入当前操作，使节点能够基于现有的上下文配置进行构建。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li><li>view_opts <ul><li>view_opts参数为查看上下文提供选项，这对于在节点操作中展示和分析上下文数据可能很重要。</li><li>Comfy dtype: VIEW_OPTS</li><li>Python dtype: ContextOptions</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>CONTEXT_OPTS <ul><li>CONTEXT_OPTS输出代表了节点生成的配置上下文选项，包含了将指导后续上下文处理的参数和设置。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptions</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class LegacyLoopedUniformContextOptionsNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;context_length&#39;: (&#39;INT&#39;, {&#39;default&#39;: 16, &#39;min&#39;: 1, &#39;max&#39;: LENGTH_MAX}), &#39;context_stride&#39;: (&#39;INT&#39;, {&#39;default&#39;: 1, &#39;min&#39;: 1, &#39;max&#39;: STRIDE_MAX}), &#39;context_overlap&#39;: (&#39;INT&#39;, {&#39;default&#39;: 4, &#39;min&#39;: 0, &#39;max&#39;: OVERLAP_MAX}), &#39;context_schedule&#39;: (ContextSchedules.LEGACY_UNIFORM_SCHEDULE_LIST,), &#39;closed_loop&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False})}, &#39;optional&#39;: {&#39;fuse_method&#39;: (ContextFuseMethod.LIST, {&#39;default&#39;: ContextFuseMethod.FLAT}), &#39;use_on_equal_length&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False}), &#39;start_percent&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.001}), &#39;guarantee_steps&#39;: (&#39;INT&#39;, {&#39;default&#39;: 1, &#39;min&#39;: 0, &#39;max&#39;: BIGMAX}), &#39;prev_context&#39;: (&#39;CONTEXT_OPTIONS&#39;,), &#39;view_opts&#39;: (&#39;VIEW_OPTS&#39;,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;CONTEXT_OPTIONS&#39;,)</span></span>
<span class="line"><span>    RETURN_NAMES = (&#39;CONTEXT_OPTS&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;create_options&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def create_options(self, fuse_method: str=ContextFuseMethod.FLAT, context_schedule: str=None, **kwargs):</span></span>
<span class="line"><span>        return LoopedUniformContextOptionsNode.create_options(self, fuse_method=fuse_method, **kwargs)</span></span></code></pre></div>`,14),o=[a];function s(p,u,d,r,c,_){return l(),t("div",null,o)}const m=e(n,[["render",s]]);export{f as __pageData,m as default};
