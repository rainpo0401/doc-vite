import{_ as t,c as e,o as n,a4 as a}from"./chunks/framework.DpC1ZpOZ.js";const x=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_BatchedContextOptions.md","filePath":"comfyui/ADE/ADE_BatchedContextOptions.md"}'),s={name:"comfyui/ADE/ADE_BatchedContextOptions.md"},i=a(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: BatchedContextOptionsNode</li><li>Category: Animate Diff 🎭🅐🅓/context opts</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>BatchedContextOptionsNode旨在管理和生成动画序列的上下文选项。它提供了一种结构化的方法来定义每个上下文的长度、起始百分比和保证步骤，确保动画工作流程的连贯性和效率。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>context_length <ul><li>context_length参数指定上下文窗口的持续时间，这对于确定每个动画段的范围至关重要。它直接影响节点分段动画时间线的能力。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>start_percent <ul><li>start_percent参数指定动画序列中上下文的起始点，允许微调动画的初始焦点。它通过控制每个上下文的起始位置，在整体动画策略中扮演重要角色。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>guarantee_steps <ul><li>guarantee_steps参数确保每个上下文至少处理的步数，提供防止过早终止的保护。它对于维护动画序列的完整性很重要。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>prev_context <ul><li>prev_context参数允许延续或修改现有的上下文选项，使节点能够在之前的状态上构建。这对于维护动画过程的连续性至关重要。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>CONTEXT_OPTS <ul><li>输出CONTEXT_OPTS代表由节点生成或更新的上下文选项集合。这些选项对于指导动画过程中的后续步骤至关重要。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class BatchedContextOptionsNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;context_length&#39;: (&#39;INT&#39;, {&#39;default&#39;: 16, &#39;min&#39;: 1, &#39;max&#39;: LENGTH_MAX})}, &#39;optional&#39;: {&#39;start_percent&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.001}), &#39;guarantee_steps&#39;: (&#39;INT&#39;, {&#39;default&#39;: 1, &#39;min&#39;: 0, &#39;max&#39;: BIGMAX}), &#39;prev_context&#39;: (&#39;CONTEXT_OPTIONS&#39;,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;CONTEXT_OPTIONS&#39;,)</span></span>
<span class="line"><span>    RETURN_NAMES = (&#39;CONTEXT_OPTS&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/context opts&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;create_options&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def create_options(self, context_length: int, start_percent: float=0.0, guarantee_steps: int=1, prev_context: ContextOptionsGroup=None):</span></span>
<span class="line"><span>        if prev_context is None:</span></span>
<span class="line"><span>            prev_context = ContextOptionsGroup()</span></span>
<span class="line"><span>        prev_context = prev_context.clone()</span></span>
<span class="line"><span>        context_options = ContextOptions(context_length=context_length, context_overlap=0, context_schedule=ContextSchedules.BATCHED, start_percent=start_percent, guarantee_steps=guarantee_steps)</span></span>
<span class="line"><span>        prev_context.add(context_options)</span></span>
<span class="line"><span>        return (prev_context,)</span></span></code></pre></div>`,14),o=[i];function l(p,c,r,u,d,_){return n(),e("div",null,o)}const m=t(s,[["render",l]]);export{x as __pageData,m as default};
