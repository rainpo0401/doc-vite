import{_ as e,c as i,o as a,a4 as s}from"./chunks/framework.DpC1ZpOZ.js";const h=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_NoiseLayerAddWeighted.md","filePath":"comfyui/ADE/ADE_NoiseLayerAddWeighted.md"}'),l={name:"comfyui/ADE/ADE_NoiseLayerAddWeighted.md"},n=s(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: NoiseLayerAddWeightedNode</li><li>Category: Animate Diff 🎭🅐🅓/noise layers</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>NoiseLayerAddWeightedNode 类旨在以加权方式操作和引入噪声到系统中。它是动画过程中的一个关键组件，允许微调噪声特征。该节点的主要功能是向现有组中添加噪声层，确保新噪声元素与现有元素的平衡集成，从而增强动画的整体多样性和复杂性。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>batch_offset <ul><li>batch_offset 参数对于管理噪声层的处理顺序至关重要。它影响动画中噪声层的整体结构和组织，确保每个层在序列中正确定位。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>noise_type <ul><li>noise_type 参数定义了要添加到动画中的噪声类型。它在确定噪声的视觉和结构方面起着重要作用，从而影响动画的最终输出。</li><li>Comfy dtype: NoiseLayerType.LIST</li><li>Python dtype: str</li></ul></li><li>seed_gen_override <ul><li>seed_gen_override 参数允许定制噪声生成过程。它对于创建独特的噪声模式和确保动画随机元素所需的随机性很重要。</li><li>Comfy dtype: SeedNoiseGeneration.LIST_WITH_OVERRIDE</li><li>Python dtype: str</li></ul></li><li>seed_offset <ul><li>seed_offset 参数对于控制噪声生成中的随机性至关重要。它确保每个噪声层都有独特且不可预测的质量，有助于增加动画的多样性。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>noise_weight <ul><li>noise_weight 参数调整添加到动画中的噪声强度。它是实现所需视觉效果的关键因素，并确保噪声与动画的基本元素保持平衡。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>balance_multiplier <ul><li>balance_multiplier 参数用于微调现有噪声与新增噪声之间的平衡。它确保整体噪声效果和谐并融入动画中。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>prev_noise_layers <ul><li>prev_noise_layers 参数是之前生成的噪声层的可选组。它允许在现有噪声结构的基础上继续和构建，保持动画的一致性和连贯性。</li><li>Comfy dtype: NOISE_LAYERS</li><li>Python dtype: Optional[NoiseLayerGroup]</li></ul></li><li>mask_optional <ul><li>mask_optional 参数是一个可选的张量，可以用来选择性地将噪声应用于动画的特定区域。它提供了对噪声效果最突出位置的控制。</li><li>Comfy dtype: MASK</li><li>Python dtype: Optional[torch.Tensor]</li></ul></li><li>seed_override <ul><li>seed_override 参数为噪声生成中使用的种子提供了一个可选的覆盖。它可以用来确保可重复性或将特定的噪声模式引入到动画中。</li><li>Comfy dtype: INT</li><li>Python dtype: Optional[int]</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>noise_layers <ul><li>NoiseLayerAddWeightedNode 的输出是修改后的噪声层组，其中包括新添加的加权噪声层。这个输出很重要，因为它构成了进一步处理和动画开发的基础。</li><li>Comfy dtype: NOISE_LAYERS</li><li>Python dtype: NoiseLayerGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class NoiseLayerAddWeightedNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;batch_offset&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: 0, &#39;max&#39;: BIGMAX}), &#39;noise_type&#39;: (NoiseLayerType.LIST,), &#39;seed_gen_override&#39;: (SeedNoiseGeneration.LIST_WITH_OVERRIDE,), &#39;seed_offset&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: BIGMIN, &#39;max&#39;: BIGMAX}), &#39;noise_weight&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.5, &#39;min&#39;: 0.0, &#39;max&#39;: 10.0, &#39;step&#39;: 0.001}), &#39;balance_multiplier&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 1.0, &#39;min&#39;: 0.0, &#39;step&#39;: 0.001})}, &#39;optional&#39;: {&#39;prev_noise_layers&#39;: (&#39;NOISE_LAYERS&#39;,), &#39;mask_optional&#39;: (&#39;MASK&#39;,), &#39;seed_override&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: 0, &#39;max&#39;: 18446744073709551615, &#39;forceInput&#39;: True})}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;NOISE_LAYERS&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/noise layers&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;create_layers&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def create_layers(self, batch_offset: int, noise_type: str, seed_gen_override: str, seed_offset: int, noise_weight: float, balance_multiplier: float, prev_noise_layers: NoiseLayerGroup=None, mask_optional: Tensor=None, seed_override: int=None):</span></span>
<span class="line"><span>        if prev_noise_layers is None:</span></span>
<span class="line"><span>            prev_noise_layers = NoiseLayerGroup()</span></span>
<span class="line"><span>        prev_noise_layers = prev_noise_layers.clone()</span></span>
<span class="line"><span>        layer = NoiseLayerAddWeighted(noise_type=noise_type, batch_offset=batch_offset, seed_gen_override=seed_gen_override, seed_offset=seed_offset, seed_override=seed_override, mask=mask_optional, noise_weight=noise_weight, balance_multiplier=balance_multiplier)</span></span>
<span class="line"><span>        prev_noise_layers.add_to_start(layer)</span></span>
<span class="line"><span>        return (prev_noise_layers,)</span></span></code></pre></div>`,14),t=[n];function o(p,r,d,_,u,y){return a(),i("div",null,t)}const f=e(l,[["render",o]]);export{h as __pageData,f as default};
