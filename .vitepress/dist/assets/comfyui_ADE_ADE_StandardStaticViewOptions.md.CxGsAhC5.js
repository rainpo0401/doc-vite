import{_ as e,c as t,o as a,a4 as n}from"./chunks/framework.DpC1ZpOZ.js";const m=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_StandardStaticViewOptions.md","filePath":"comfyui/ADE/ADE_StandardStaticViewOptions.md"}'),i={name:"comfyui/ADE/ADE_StandardStaticViewOptions.md"},s=n(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: StandardStaticViewOptionsNode</li><li>Category: Animate Diff 🎭🅐🅓/context opts/view opts</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>StandardStaticViewOptionsNode旨在为动画上下文中的静态视图生成一组选项。它允许自定义视图长度和重叠，确保动画体验的无缝和连贯性。该节点在定义动画中不同帧或片段如何呈现给观众方面起着关键作用。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>view_length <ul><li>view_length参数决定了每个视图中显示的帧或元素的数量。它对于设置动画的范围和细节级别至关重要，影响整体的观看体验。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>view_overlap <ul><li>view_overlap参数指定相邻视图之间的重叠程度。这对于保持连续性很重要，并且可以帮助在动画的不同部分之间创建平滑的过渡。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>fuse_method <ul><li>fuse_method参数定义了在动画中组合或融合不同视图所使用的方法。它可能显著影响最终的外观以及通过动画序列传达信息的方式。</li><li>Comfy dtype: ContextFuseMethod.LIST</li><li>Python dtype: str</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>view_options <ul><li>view_options输出提供了一组结构化的选项，这些选项决定了动画中视图的配置方式。它封装了用户设置的参数，对动画的执行至关重要。</li><li>Comfy dtype: VIEW_OPTS</li><li>Python dtype: ContextOptions</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class StandardStaticViewOptionsNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;view_length&#39;: (&#39;INT&#39;, {&#39;default&#39;: 16, &#39;min&#39;: 1, &#39;max&#39;: LENGTH_MAX}), &#39;view_overlap&#39;: (&#39;INT&#39;, {&#39;default&#39;: 4, &#39;min&#39;: 0, &#39;max&#39;: OVERLAP_MAX})}, &#39;optional&#39;: {&#39;fuse_method&#39;: (ContextFuseMethod.LIST,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;VIEW_OPTS&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/context opts/view opts&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;create_options&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def create_options(self, view_length: int, view_overlap: int, fuse_method: str=ContextFuseMethod.FLAT):</span></span>
<span class="line"><span>        view_options = ContextOptions(context_length=view_length, context_stride=None, context_overlap=view_overlap, context_schedule=ContextSchedules.STATIC_STANDARD, fuse_method=fuse_method)</span></span>
<span class="line"><span>        return (view_options,)</span></span></code></pre></div>`,14),o=[s];function l(p,d,r,u,c,h){return a(),t("div",null,o)}const f=e(i,[["render",l]]);export{m as __pageData,f as default};
