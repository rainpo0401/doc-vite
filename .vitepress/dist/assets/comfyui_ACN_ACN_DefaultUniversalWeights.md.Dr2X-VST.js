import{_ as a,c as e,o as s,a4 as t}from"./chunks/framework.DpC1ZpOZ.js";const f=JSON.parse('{"title":"ACN_DefaultUniversalWeights","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ACN/ACN_DefaultUniversalWeights.md","filePath":"comfyui/ACN/ACN_DefaultUniversalWeights.md"}'),n={name:"comfyui/ACN/ACN_DefaultUniversalWeights.md"},l=t(`<h1 id="acn-defaultuniversalweights" tabindex="-1">ACN_DefaultUniversalWeights <a class="header-anchor" href="#acn-defaultuniversalweights" aria-label="Permalink to &quot;ACN_DefaultUniversalWeights&quot;">​</a></h1><ul><li>Class name: DefaultWeights</li><li>Category: Adv-ControlNet 🛂🅐🅒🅝/weights</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet.git</a></li></ul><p>DefaultWeights节点的&#39;load_weights&#39;方法旨在初始化并返回一组默认的控制权重和相应的时间步关键帧组。它是构建控制网络的基础组件，确保系统有一个操作的基线权重集。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>CONTROL_NET_WEIGHTS <ul><li>CONTROL_NET_WEIGHTS输出参数代表网络的默认控制权重。它是塑造控制网络行为的关键元素，因为它定义了后续计算和调整中将使用初始权重。</li><li>Comfy dtype: ControlWeights</li><li>Python dtype: ControlWeights</li></ul></li><li>TIMESTEP_KEYFRAME <ul><li>TIMESTEP_KEYFRAME输出参数封装了与控制权重相关联的关键帧组。它在控制网络的时间动态中起着重要作用，提供了一种结构化的方式来管理和随时间应用权重。</li><li>Comfy dtype: TimestepKeyframeGroup</li><li>Python dtype: TimestepKeyframeGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class DefaultWeights:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;CONTROL_NET_WEIGHTS&#39;, &#39;TIMESTEP_KEYFRAME&#39;)</span></span>
<span class="line"><span>    RETURN_NAMES = WEIGHTS_RETURN_NAMES</span></span>
<span class="line"><span>    FUNCTION = &#39;load_weights&#39;</span></span>
<span class="line"><span>    CATEGORY = &#39;Adv-ControlNet 🛂🅐🅒🅝/weights&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def load_weights(self):</span></span>
<span class="line"><span>        weights = ControlWeights.default()</span></span>
<span class="line"><span>        return (weights, TimestepKeyframeGroup.default(TimestepKeyframe(control_weights=weights)))</span></span></code></pre></div>`,10),i=[l];function p(o,r,u,c,h,d){return s(),e("div",null,i)}const g=a(n,[["render",p]]);export{f as __pageData,g as default};
