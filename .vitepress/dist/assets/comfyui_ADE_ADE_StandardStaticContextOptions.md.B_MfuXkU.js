import{_ as t,c as e,o as n,a4 as a}from"./chunks/framework.DpC1ZpOZ.js";const x=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_StandardStaticContextOptions.md","filePath":"comfyui/ADE/ADE_StandardStaticContextOptions.md"}'),o={name:"comfyui/ADE/ADE_StandardStaticContextOptions.md"},s=a(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: StandardStaticContextOptionsNode</li><li>Category: Animate Diff 🎭🅐🅓/context opts</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>StandardStaticContextOptionsNode的<code>create_options</code>方法旨在为动画过程生成和配置上下文选项。它允许自定义上下文长度、重叠以及其他影响动画如何在帧之间区分的参数。此方法在设置动画上下文方面至关重要，确保生成的帧是连贯且具有上下文感知的。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>context_length <ul><li>参数<code>context_length</code>指定每个动画步骤中要考虑的上下文帧数。这对于确定每个帧对动画结果的影响范围至关重要。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>context_overlap <ul><li>参数<code>context_overlap</code>定义了动画序列中相邻上下文之间的重叠。这对于确保动画中的平滑过渡和连续性具有重要意义。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>fuse_method <ul><li>参数<code>fuse_method</code>确定动画过程中不同上下文如何合并或融合。它可能影响动画的整体连贯性和风格一致性。</li><li>Comfy dtype: str</li><li>Python dtype: str</li></ul></li><li>use_on_equal_length <ul><li>标志<code>use_on_equal_length</code>指示在动画帧长度相等时是否应该应用上下文选项。它可能影响动画中帧的分布。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li><li>start_percent <ul><li>参数<code>start_percent</code>设置上下文选项的起始百分比，这可能影响动画开始整合这些选项的时间。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>guarantee_steps <ul><li>参数<code>guarantee_steps</code>确保在动画过程中至少应用上下文选项的最小步数，为动画过程提供稳定性。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>view_opts <ul><li>参数<code>view_opts</code>允许自定义上下文中的视图选项，这可以改变动画的视觉呈现。</li><li>Comfy dtype: VIEW_OPTS</li><li>Python dtype: ContextOptions</li></ul></li><li>prev_context <ul><li>参数<code>prev_context</code>用于将先前的上下文选项带入新的上下文，保持动画序列的连续性。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>CONTEXT_OPTS <ul><li>输出<code>CONTEXT_OPTS</code>提供了在动画过程的后续步骤中将使用的配置上下文选项。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class StandardStaticContextOptionsNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;context_length&#39;: (&#39;INT&#39;, {&#39;default&#39;: 16, &#39;min&#39;: 1, &#39;max&#39;: LENGTH_MAX}), &#39;context_overlap&#39;: (&#39;INT&#39;, {&#39;default&#39;: 4, &#39;min&#39;: 0, &#39;max&#39;: OVERLAP_MAX})}, &#39;optional&#39;: {&#39;fuse_method&#39;: (ContextFuseMethod.LIST_STATIC,), &#39;use_on_equal_length&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False}), &#39;start_percent&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.001}), &#39;guarantee_steps&#39;: (&#39;INT&#39;, {&#39;default&#39;: 1, &#39;min&#39;: 0, &#39;max&#39;: BIGMAX}), &#39;prev_context&#39;: (&#39;CONTEXT_OPTIONS&#39;,), &#39;view_opts&#39;: (&#39;VIEW_OPTS&#39;,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;CONTEXT_OPTIONS&#39;,)</span></span>
<span class="line"><span>    RETURN_NAMES = (&#39;CONTEXT_OPTS&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/context opts&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;create_options&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def create_options(self, context_length: int, context_overlap: int, fuse_method: str=ContextFuseMethod.PYRAMID, use_on_equal_length=False, start_percent: float=0.0, guarantee_steps: int=1, view_opts: ContextOptions=None, prev_context: ContextOptionsGroup=None):</span></span>
<span class="line"><span>        if prev_context is None:</span></span>
<span class="line"><span>            prev_context = ContextOptionsGroup()</span></span>
<span class="line"><span>        prev_context = prev_context.clone()</span></span>
<span class="line"><span>        context_options = ContextOptions(context_length=context_length, context_stride=None, context_overlap=context_overlap, context_schedule=ContextSchedules.STATIC_STANDARD, fuse_method=fuse_method, use_on_equal_length=use_on_equal_length, start_percent=start_percent, guarantee_steps=guarantee_steps, view_options=view_opts)</span></span>
<span class="line"><span>        prev_context.add(context_options)</span></span>
<span class="line"><span>        return (prev_context,)</span></span></code></pre></div>`,14),l=[s];function i(p,c,d,r,u,_){return n(),e("div",null,l)}const m=t(o,[["render",i]]);export{x as __pageData,m as default};
