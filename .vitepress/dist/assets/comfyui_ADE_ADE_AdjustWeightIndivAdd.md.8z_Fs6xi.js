import{_ as a,c as t,o as e,a4 as s}from"./chunks/framework.DpC1ZpOZ.js";const A=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_AdjustWeightIndivAdd.md","filePath":"comfyui/ADE/ADE_AdjustWeightIndivAdd.md"}'),n={name:"comfyui/ADE/ADE_AdjustWeightIndivAdd.md"},i=s(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: WeightAdjustIndivAddNode</li><li>Category: Animate Diff 🎭🅐🅓/ad settings/weight adjust</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>WeightAdjustIndivAddNode 旨在通过向不同类型的参数添加特定值来单独调整模型的权重。它封装了根据指定标准进行修改的逻辑，确保以结构化和模块化的方式应用这些调整。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>pe_ADD <ul><li>pe_ADD 参数允许调整位置编码权重。它在微调模型对输入序列结构的理解中起着至关重要的作用，这对于依赖于元素顺序的任务至关重要。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>attn_ADD <ul><li>attn_ADD 参数用于修改注意力机制的权重。通过调整此参数，可以增强模型聚焦输入的不同部分的能力，可能有助于提高模型在需要对上下文有细微理解的任务上的性能。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>other_ADD <ul><li>other_ADD 参数用于调整不属于预定义类别的权重。它提供了微调模型的灵活性，以覆盖其他参数未涵盖的方式，允许进行更广泛的调整。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>print_adjustment <ul><li>print_adjustment 标志控制是否将对权重所做的调整记录在日志中。这对于调试和理解调整对模型行为的影响非常有用。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>prev_weight_adjust <ul><li>prev_weight_adjust 参数是可选的先前调整组，可以应用于模型。这允许继续一系列调整或应用一组预定义的修改。</li><li>Comfy dtype: WEIGHT_ADJUST</li><li>Python dtype: AdjustGroup</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>weight_adjust <ul><li>WeightAdjustIndivAddNode 的输出是一个 WEIGHT_ADJUST 对象，它代表了对模型权重所做的集体调整。这个对象可以用来进一步完善模型或将调整应用于另一个模型实例。</li><li>Comfy dtype: WEIGHT_ADJUST</li><li>Python dtype: AdjustGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class WeightAdjustIndivAddNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;pe_ADD&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.0, &#39;min&#39;: -2.0, &#39;max&#39;: 2.0, &#39;step&#39;: 1e-06}), &#39;attn_ADD&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.0, &#39;min&#39;: -2.0, &#39;max&#39;: 2.0, &#39;step&#39;: 1e-06}), &#39;other_ADD&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.0, &#39;min&#39;: -2.0, &#39;max&#39;: 2.0, &#39;step&#39;: 1e-06}), &#39;print_adjustment&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False})}, &#39;optional&#39;: {&#39;prev_weight_adjust&#39;: (&#39;WEIGHT_ADJUST&#39;,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;WEIGHT_ADJUST&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/ad settings/weight adjust&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;get_weight_adjust&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def get_weight_adjust(self, pe_ADD: float, attn_ADD: float, other_ADD: float, print_adjustment: bool, prev_weight_adjust: AdjustGroup=None):</span></span>
<span class="line"><span>        if prev_weight_adjust is None:</span></span>
<span class="line"><span>            prev_weight_adjust = AdjustGroup()</span></span>
<span class="line"><span>        prev_weight_adjust = prev_weight_adjust.clone()</span></span>
<span class="line"><span>        adjust = AdjustWeight(pe_ADD=pe_ADD, attn_ADD=attn_ADD, other_ADD=other_ADD, print_adjustment=print_adjustment)</span></span>
<span class="line"><span>        prev_weight_adjust.add(adjust)</span></span>
<span class="line"><span>        return (prev_weight_adjust,)</span></span></code></pre></div>`,14),l=[i];function p(d,o,u,r,h,_){return e(),t("div",null,l)}const D=a(n,[["render",p]]);export{A as __pageData,D as default};
