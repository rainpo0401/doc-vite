import{_ as e,c as t,o as n,a4 as a}from"./chunks/framework.DpC1ZpOZ.js";const h=JSON.parse('{"title":"ACN_ReferenceControlNetFinetune","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ACN/ACN_ReferenceControlNetFinetune.md","filePath":"comfyui/ACN/ACN_ReferenceControlNetFinetune.md"}'),l={name:"comfyui/ACN/ACN_ReferenceControlNetFinetune.md"},i=a(`<h1 id="acn-referencecontrolnetfinetune" tabindex="-1">ACN_ReferenceControlNetFinetune <a class="header-anchor" href="#acn-referencecontrolnetfinetune" aria-label="Permalink to &quot;ACN_ReferenceControlNetFinetune&quot;">​</a></h1><ul><li>Class name: ReferenceControlFinetune</li><li>Category: Adv-ControlNet 🛂🅐🅒🅝/Reference</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-Advanced-ControlNet.git</a></li></ul><p>ReferenceControlFinetune 是一个用于高级图像处理任务的控制网络微调节点。它利用注意力和自适应实例归一化机制，在风格迁移和内容适应中实现高保真度。该节点在增强生成过程的控制中起着关键作用，允许对最终输出进行精细调整。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>attn_style_fidelity <ul><li>attn_style_fidelity 参数控制应用风格转换时注意力机制的保真度。它对于平衡风格化效果和保留内容细节至关重要，从而影响整体的美学结果。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>attn_ref_weight <ul><li>attn_ref_weight 参数确定注意力机制中参考的权重，影响风格转换受参考内容指导的程度。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>attn_strength <ul><li>attn_strength 参数调整注意力机制对风格化过程的影响强度，允许控制应用风格的强度。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>adain_style_fidelity <ul><li>adain_style_fidelity 参数在应用风格时决定自适应实例归一化保真度级别，这对于在应用风格的同时保持原始图像特征的完整性至关重要。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>adain_ref_weight <ul><li>adain_ref_weight 参数设置自适应实例归一化中的参考权重，影响参考风格应用于图像的强度。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>adain_strength <ul><li>adain_strength 参数定义自适应实例归一化效果的总体强度，允许微调风格如何融入图像。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>control_net <ul><li>ReferenceControlFinetune 节点的输出是一个控制网络，它封装了微调后的参数和机制，用于高级风格控制和操作。它是后续图像生成任务的关键组件。</li><li>Comfy dtype: CONTROL_NET</li><li>Python dtype: comfy.controlnet.ControlBase</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: GPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class ReferenceControlFinetune:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;attn_style_fidelity&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.5, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.01}), &#39;attn_ref_weight&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 1.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.01}), &#39;attn_strength&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 1.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.01}), &#39;adain_style_fidelity&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.5, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.01}), &#39;adain_ref_weight&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 1.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.01}), &#39;adain_strength&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 1.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.01})}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;CONTROL_NET&#39;,)</span></span>
<span class="line"><span>    FUNCTION = &#39;load_controlnet&#39;</span></span>
<span class="line"><span>    CATEGORY = &#39;Adv-ControlNet 🛂🅐🅒🅝/Reference&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def load_controlnet(self, attn_style_fidelity: float, attn_ref_weight: float, attn_strength: float, adain_style_fidelity: float, adain_ref_weight: float, adain_strength: float):</span></span>
<span class="line"><span>        ref_opts = ReferenceOptions(reference_type=ReferenceType.ATTN_ADAIN, attn_style_fidelity=attn_style_fidelity, attn_ref_weight=attn_ref_weight, attn_strength=attn_strength, adain_style_fidelity=adain_style_fidelity, adain_ref_weight=adain_ref_weight, adain_strength=adain_strength)</span></span>
<span class="line"><span>        controlnet = ReferenceAdvanced(ref_opts=ref_opts, timestep_keyframes=None)</span></span>
<span class="line"><span>        return (controlnet,)</span></span></code></pre></div>`,12),s=[i];function o(r,p,d,_,f,c){return n(),t("div",null,s)}const y=e(l,[["render",o]]);export{h as __pageData,y as default};
