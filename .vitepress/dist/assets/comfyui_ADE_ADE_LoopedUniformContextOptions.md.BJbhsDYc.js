import{_ as e,c as t,o as n,a4 as o}from"./chunks/framework.DpC1ZpOZ.js";const m=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_LoopedUniformContextOptions.md","filePath":"comfyui/ADE/ADE_LoopedUniformContextOptions.md"}'),l={name:"comfyui/ADE/ADE_LoopedUniformContextOptions.md"},a=o(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: LoopedUniformContextOptionsNode</li><li>Category: Animate Diff 🎭🅐🅓/context opts</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>LoopedUniformContextOptionsNode旨在为动画目的生成一系列上下文选项。它根据给定的参数创建基于上下文的均匀分布，确保动画帧的一致流动。该节点特别适用于创建动画循环，其中均匀性和连续性至关重要。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>context_length <ul><li>context_length参数决定了动画序列中每个上文的长度。它对于定义每个上下文的范围至关重要，并影响动画的整体结构。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>context_stride <ul><li>context_stride参数指定连续上下文之间的步长。它影响每个上下文与其邻居的关联程度，影响动画序列的连贯性。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>context_overlap <ul><li>context_overlap参数定义了相邻上下文之间的重叠量。这对于确保动画中上下文之间的平滑过渡和保持视觉连续性很重要。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>closed_loop <ul><li>closed_loop参数指示动画是否应在最后一个上下文之后循环回到开头。这可以用来创建无缝、重复的动画。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>fuse_method <ul><li>fuse_method参数决定了动画中上下文是如何融合在一起的。它可以影响上下文的混合和合并，影响动画的最终外观。</li><li>Comfy dtype: ContextFuseMethod.LIST</li><li>Python dtype: str</li></ul></li><li>use_on_equal_length <ul><li>use_on_equal_length参数指定是否仅在上下文的长度符合特定条件时才应使用上下文。这可以用来根据特定标准控制上下文的应用。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li><li>start_percent <ul><li>start_percent参数定义了动画序列中上下文的起始百分比。它用于控制每个上下文开始的时间。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>guarantee_steps <ul><li>guarantee_steps参数确保每个上下文在动画中至少显示一定数量的步骤。这有助于保持每个上下文在序列中的可见性和影响力。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>view_opts <ul><li>view_opts参数提供了查看动画的选项。它可以包括影响动画显示或渲染的设置。</li><li>Comfy dtype: VIEW_OPTS</li><li>Python dtype: ContextOptions</li></ul></li><li>prev_context <ul><li>prev_context参数允许延续之前的上下文序列。当扩展或修改现有的动画序列时使用。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>CONTEXT_OPTS <ul><li>输出CONTEXT_OPTS提供了基于输入参数生成的一组结构化的上下文选项。这些选项可以直接用于动画过程。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class LoopedUniformContextOptionsNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;context_length&#39;: (&#39;INT&#39;, {&#39;default&#39;: 16, &#39;min&#39;: 1, &#39;max&#39;: LENGTH_MAX}), &#39;context_stride&#39;: (&#39;INT&#39;, {&#39;default&#39;: 1, &#39;min&#39;: 1, &#39;max&#39;: STRIDE_MAX}), &#39;context_overlap&#39;: (&#39;INT&#39;, {&#39;default&#39;: 4, &#39;min&#39;: 0, &#39;max&#39;: OVERLAP_MAX}), &#39;closed_loop&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False})}, &#39;optional&#39;: {&#39;fuse_method&#39;: (ContextFuseMethod.LIST,), &#39;use_on_equal_length&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False}), &#39;start_percent&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.001}), &#39;guarantee_steps&#39;: (&#39;INT&#39;, {&#39;default&#39;: 1, &#39;min&#39;: 0, &#39;max&#39;: BIGMAX}), &#39;prev_context&#39;: (&#39;CONTEXT_OPTIONS&#39;,), &#39;view_opts&#39;: (&#39;VIEW_OPTS&#39;,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;CONTEXT_OPTIONS&#39;,)</span></span>
<span class="line"><span>    RETURN_NAMES = (&#39;CONTEXT_OPTS&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/context opts&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;create_options&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def create_options(self, context_length: int, context_stride: int, context_overlap: int, closed_loop: bool, fuse_method: str=ContextFuseMethod.FLAT, use_on_equal_length=False, start_percent: float=0.0, guarantee_steps: int=1, view_opts: ContextOptions=None, prev_context: ContextOptionsGroup=None):</span></span>
<span class="line"><span>        if prev_context is None:</span></span>
<span class="line"><span>            prev_context = ContextOptionsGroup()</span></span>
<span class="line"><span>        prev_context = prev_context.clone()</span></span>
<span class="line"><span>        context_options = ContextOptions(context_length=context_length, context_stride=context_stride, context_overlap=context_overlap, context_schedule=ContextSchedules.UNIFORM_LOOPED, closed_loop=closed_loop, fuse_method=fuse_method, use_on_equal_length=use_on_equal_length, start_percent=start_percent, guarantee_steps=guarantee_steps, view_options=view_opts)</span></span>
<span class="line"><span>        prev_context.add(context_options)</span></span>
<span class="line"><span>        return (prev_context,)</span></span></code></pre></div>`,14),i=[a];function s(p,r,u,_,c,d){return n(),t("div",null,i)}const f=e(l,[["render",s]]);export{m as __pageData,f as default};
