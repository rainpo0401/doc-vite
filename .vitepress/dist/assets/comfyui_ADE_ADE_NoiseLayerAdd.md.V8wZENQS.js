import{_ as e,c as a,o as s,a4 as i}from"./chunks/framework.DpC1ZpOZ.js";const h=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_NoiseLayerAdd.md","filePath":"comfyui/ADE/ADE_NoiseLayerAdd.md"}'),n={name:"comfyui/ADE/ADE_NoiseLayerAdd.md"},l=i(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: NoiseLayerAddNode</li><li>Category: Animate Diff 🎭🅐🅓/noise layers</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>NoiseLayerAddNode 类旨在管理向动画中添加噪声层。它负责根据指定的参数创建和组织噪声层，确保将噪声无缝集成到动画过程中，以增强多样性和细节。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>batch_offset <ul><li>批次偏移参数对于管理动画中的噪声层序列至关重要。它决定了噪声应用的起始点，从而影响整个动画中噪声的分布和模式。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>noise_type <ul><li>噪声类型参数定义了要添加到动画中的噪声类别。它是塑造噪声视觉特征的关键决定因素，影响动画输出的最终美感。</li><li>Comfy dtype: NoiseLayerType.LIST</li><li>Python dtype: str</li></ul></li><li>seed_gen_override <ul><li>种子生成覆盖参数允许自定义噪声生成过程。它提供了一种控制噪声模式的随机性和独特性的方法，为动画的噪声特性提供了一层微调。</li><li>Comfy dtype: SeedNoiseGeneration.LIST_WITH_OVERRIDE</li><li>Python dtype: str</li></ul></li><li>seed_offset <ul><li>种子偏移参数在调整噪声模式的起始点方面起着重要作用。它可以显著改变初始噪声配置，从而导致动画噪声呈现的变化。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>noise_weight <ul><li>噪声权重参数调整被添加到动画中的噪声强度。它是控制噪声效果显著性的一个关键因素，允许将噪声平衡地集成到动画中。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>prev_noise_layers <ul><li>之前的噪声层参数指的是现有的噪声层集合。它很重要，因为它为新噪声层的集成提供了上下文，确保了动画噪声结构内的连续性和一致性。</li><li>Comfy dtype: NOISE_LAYERS</li><li>Python dtype: Optional[NoiseLayerGroup]</li></ul></li><li>mask_optional <ul><li>掩码可选参数用于为噪声层定义一个可选的掩码。它可以被用来选择性地将噪声应用于动画的特定区域，提供对噪声分布的一定程度的控制。</li><li>Comfy dtype: MASK</li><li>Python dtype: Optional[torch.Tensor]</li></ul></li><li>seed_override <ul><li>种子覆盖参数允许手动指定噪声生成的种子。它特别适用于复制或自定义动画中的特定噪声模式。</li><li>Comfy dtype: INT</li><li>Python dtype: Optional[int]</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>noise_layers <ul><li>输出噪声层表示添加新噪声层后更新的噪声层集合。这个输出很重要，因为它反映了动画噪声结构的当前状态，为进一步的处理或分析提供了基础。</li><li>Comfy dtype: NOISE_LAYERS</li><li>Python dtype: NoiseLayerGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class NoiseLayerAddNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;batch_offset&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: 0, &#39;max&#39;: BIGMAX}), &#39;noise_type&#39;: (NoiseLayerType.LIST,), &#39;seed_gen_override&#39;: (SeedNoiseGeneration.LIST_WITH_OVERRIDE,), &#39;seed_offset&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: BIGMIN, &#39;max&#39;: BIGMAX}), &#39;noise_weight&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.5, &#39;min&#39;: 0.0, &#39;max&#39;: 10.0, &#39;step&#39;: 0.001})}, &#39;optional&#39;: {&#39;prev_noise_layers&#39;: (&#39;NOISE_LAYERS&#39;,), &#39;mask_optional&#39;: (&#39;MASK&#39;,), &#39;seed_override&#39;: (&#39;INT&#39;, {&#39;default&#39;: 0, &#39;min&#39;: 0, &#39;max&#39;: 18446744073709551615, &#39;forceInput&#39;: True})}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;NOISE_LAYERS&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/noise layers&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;create_layers&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def create_layers(self, batch_offset: int, noise_type: str, seed_gen_override: str, seed_offset: int, noise_weight: float, prev_noise_layers: NoiseLayerGroup=None, mask_optional: Tensor=None, seed_override: int=None):</span></span>
<span class="line"><span>        if prev_noise_layers is None:</span></span>
<span class="line"><span>            prev_noise_layers = NoiseLayerGroup()</span></span>
<span class="line"><span>        prev_noise_layers = prev_noise_layers.clone()</span></span>
<span class="line"><span>        layer = NoiseLayerAdd(noise_type=noise_type, batch_offset=batch_offset, seed_gen_override=seed_gen_override, seed_offset=seed_offset, seed_override=seed_override, mask=mask_optional, noise_weight=noise_weight)</span></span>
<span class="line"><span>        prev_noise_layers.add_to_start(layer)</span></span>
<span class="line"><span>        return (prev_noise_layers,)</span></span></code></pre></div>`,14),t=[l];function o(p,r,d,_,u,y){return s(),a("div",null,t)}const f=e(n,[["render",o]]);export{h as __pageData,f as default};
