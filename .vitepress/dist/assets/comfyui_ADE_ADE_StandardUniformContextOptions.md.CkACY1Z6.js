import{_ as e,c as t,o as n,a4 as a}from"./chunks/framework.DpC1ZpOZ.js";const m=JSON.parse('{"title":"Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"comfyui/ADE/ADE_StandardUniformContextOptions.md","filePath":"comfyui/ADE/ADE_StandardUniformContextOptions.md"}'),o={name:"comfyui/ADE/ADE_StandardUniformContextOptions.md"},s=a(`<h1 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h1><ul><li>Class name: StandardUniformContextOptionsNode</li><li>Category: Animate Diff 🎭🅐🅓/context opts</li><li>Output node: False</li><li>Repo Ref: <a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git" target="_blank" rel="noreferrer">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved.git</a></li></ul><p>StandardUniformContextOptionsNode 类的 <code>create_options</code> 方法旨在为动画和差异化任务生成一组上下文选项。它配置了控制动画过程粒度和连续性的上下文参数，如长度、步长和重叠。此方法在建立动画如何在不同帧或阶段进行差异化的框架中起着关键作用。</p><h1 id="input-types" tabindex="-1">Input types <a class="header-anchor" href="#input-types" aria-label="Permalink to &quot;Input types&quot;">​</a></h1><h2 id="required" tabindex="-1">Required <a class="header-anchor" href="#required" aria-label="Permalink to &quot;Required&quot;">​</a></h2><ul><li>context_length <ul><li>参数 <code>context_length</code> 定义了上下文将覆盖的帧或数据点的范围。它对于确定每个上下文选项对动画结果的影响范围至关重要。此参数直接影响细节水平和不同动画阶段之间过渡的平滑度。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>context_stride <ul><li>参数 <code>context_stride</code> 指定连续上下文帧之间的间隔。它对动画过程的效率很重要，因为它影响新上下文信息的引入频率。这个步长设置可以优化性能和动画中所需细节水平之间的平衡。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>context_overlap <ul><li>参数 <code>context_overlap</code> 确定连续上下文的重叠程度。这种重叠对于保持动画序列的连续性至关重要，确保从一个上下文平滑过渡到下一个上下文。在处理需要逐渐过渡而不是突然变化的复杂转换时，这一点尤其重要。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li></ul><h2 id="optional" tabindex="-1">Optional <a class="header-anchor" href="#optional" aria-label="Permalink to &quot;Optional&quot;">​</a></h2><ul><li>fuse_method <ul><li>参数 <code>fuse_method</code> 确定在动画中合并或融合不同上下文的策略。它在构建整体上下文的方式中起着重要作用，并且可以显著影响最终动画的连贯性以及不同元素在其中的交互方式。</li><li>Comfy dtype: ContextFuseMethod.LIST</li><li>Python dtype: str</li></ul></li><li>use_on_equal_length <ul><li>参数 <code>use_on_equal_length</code> 是一个布尔标志，设置后表示仅在上下文长度相等时才应用上下文选项。这在确保动画过程中的一致性时很重要，特别是处理不同长度的数据时。</li><li>Comfy dtype: BOOLEAN</li><li>Python dtype: bool</li></ul></li><li>start_percent <ul><li>参数 <code>start_percent</code> 决定上下文在动画时间轴上的起始点。它对于将上下文与动画中的特定时刻或事件对齐至关重要，允许精确的时间控制和与其他元素的同步。</li><li>Comfy dtype: FLOAT</li><li>Python dtype: float</li></ul></li><li>guarantee_steps <ul><li>参数 <code>guarantee_steps</code> 设置上下文将被应用的最小步数。它确保每个上下文在动画中有一个确定的持续时间，有助于整体结构和动画序列的可预测性。</li><li>Comfy dtype: INT</li><li>Python dtype: int</li></ul></li><li>view_opts <ul><li>参数 <code>view_opts</code> 允许定制上下文中的视图选项。它可以用来调整渲染设置或显示偏好等视觉方面，增强动画的展示效果。</li><li>Comfy dtype: VIEW_OPTS</li><li>Python dtype: ContextOptions</li></ul></li><li>prev_context <ul><li>参数 <code>prev_context</code> 指的是动画中使用的前一个上下文选项组。它对于保持动画的连续性和流动性很重要，尤其是在基于前一个上下文构建或从一个上下文过渡到另一个上下文时。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li></ul><h1 id="output-types" tabindex="-1">Output types <a class="header-anchor" href="#output-types" aria-label="Permalink to &quot;Output types&quot;">​</a></h1><ul><li>CONTEXT_OPTS <ul><li>输出 <code>CONTEXT_OPTS</code> 表示已配置并准备应用于动画的一组上下文选项。这些选项封装了定义动画如何随时间差异化和演变的参数，确保动画序列结构化和连贯。</li><li>Comfy dtype: CONTEXT_OPTIONS</li><li>Python dtype: ContextOptionsGroup</li></ul></li></ul><h1 id="usage-tips" tabindex="-1">Usage tips <a class="header-anchor" href="#usage-tips" aria-label="Permalink to &quot;Usage tips&quot;">​</a></h1><ul><li>Infra type: CPU</li></ul><h1 id="source-code" tabindex="-1">Source code <a class="header-anchor" href="#source-code" aria-label="Permalink to &quot;Source code&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class StandardUniformContextOptionsNode:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @classmethod</span></span>
<span class="line"><span>    def INPUT_TYPES(s):</span></span>
<span class="line"><span>        return {&#39;required&#39;: {&#39;context_length&#39;: (&#39;INT&#39;, {&#39;default&#39;: 16, &#39;min&#39;: 1, &#39;max&#39;: LENGTH_MAX}), &#39;context_stride&#39;: (&#39;INT&#39;, {&#39;default&#39;: 1, &#39;min&#39;: 1, &#39;max&#39;: STRIDE_MAX}), &#39;context_overlap&#39;: (&#39;INT&#39;, {&#39;default&#39;: 4, &#39;min&#39;: 0, &#39;max&#39;: OVERLAP_MAX})}, &#39;optional&#39;: {&#39;fuse_method&#39;: (ContextFuseMethod.LIST,), &#39;use_on_equal_length&#39;: (&#39;BOOLEAN&#39;, {&#39;default&#39;: False}), &#39;start_percent&#39;: (&#39;FLOAT&#39;, {&#39;default&#39;: 0.0, &#39;min&#39;: 0.0, &#39;max&#39;: 1.0, &#39;step&#39;: 0.001}), &#39;guarantee_steps&#39;: (&#39;INT&#39;, {&#39;default&#39;: 1, &#39;min&#39;: 0, &#39;max&#39;: BIGMAX}), &#39;prev_context&#39;: (&#39;CONTEXT_OPTIONS&#39;,), &#39;view_opts&#39;: (&#39;VIEW_OPTS&#39;,)}}</span></span>
<span class="line"><span>    RETURN_TYPES = (&#39;CONTEXT_OPTIONS&#39;,)</span></span>
<span class="line"><span>    RETURN_NAMES = (&#39;CONTEXT_OPTS&#39;,)</span></span>
<span class="line"><span>    CATEGORY = &#39;Animate Diff 🎭🅐🅓/context opts&#39;</span></span>
<span class="line"><span>    FUNCTION = &#39;create_options&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def create_options(self, context_length: int, context_stride: int, context_overlap: int, fuse_method: str=ContextFuseMethod.PYRAMID, use_on_equal_length=False, start_percent: float=0.0, guarantee_steps: int=1, view_opts: ContextOptions=None, prev_context: ContextOptionsGroup=None):</span></span>
<span class="line"><span>        if prev_context is None:</span></span>
<span class="line"><span>            prev_context = ContextOptionsGroup()</span></span>
<span class="line"><span>        prev_context = prev_context.clone()</span></span>
<span class="line"><span>        context_options = ContextOptions(context_length=context_length, context_stride=context_stride, context_overlap=context_overlap, context_schedule=ContextSchedules.UNIFORM_STANDARD, closed_loop=False, fuse_method=fuse_method, use_on_equal_length=use_on_equal_length, start_percent=start_percent, guarantee_steps=guarantee_steps, view_options=view_opts)</span></span>
<span class="line"><span>        prev_context.add(context_options)</span></span>
<span class="line"><span>        return (prev_context,)</span></span></code></pre></div>`,14),i=[s];function l(p,d,c,r,u,_){return n(),t("div",null,i)}const f=e(o,[["render",l]]);export{m as __pageData,f as default};
